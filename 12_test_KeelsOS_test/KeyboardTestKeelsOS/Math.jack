// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	
	static Array twoToThe;
    /** Initializes the library. */
    function void init() {
	var int x, count;
	let x = 1;
	let count = 0;
	let twoToThe = Array.new(16);
	while(count < 16)
	{
		let twoToThe[count] = x;
		let x = x + x;
		let count = count + 1;
	}
	
	return;
    }

    /** Return true if j-th bit of integer x is 1 and false otherwise*/
    function boolean bit(int x, int j) {
	if ((x & (twoToThe[j])) = twoToThe[j]){
	return true;
	}	
	return false;
    }
    /** Returns the absolute value of x. */
    function int abs(int x) {
	if(x<0){
	let x = ~x + 1;
	return x;
	}
	return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
	var int sum, shiftedX, j;
	let sum = 0;
	let j = 0;
	let shiftedX = x;
	while(j < 16)
	{
		if((y & (twoToThe[j])) = twoToThe[j])
		{
			let sum = sum+shiftedX;
		}
	let shiftedX = shiftedX + shiftedX;
	let j = j + 1;
	}
	return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
    	var int q, neg1, neg2;
	let neg1 = 0;
	let neg2 = 0;
	let q = 0;
	if(y < 0) 
	{
		let y = ~y + 1;
		let neg1 = 1;
		//let y = Math.abs(y);
	}
	if(x < 0) 
	{
		let x = ~x + 1;
		let neg2 = 1;
		// let x = Math.abs(x);
	}
	if( (y > x) | (y + y < 0)) {return 0;}
	let q = Math.divide(x , 2*y);
	let q = Math.abs(q);
	if((x - (2 * q * y) < y))
	{	
		if ((neg1 & ~neg2) | (~neg1 & neg2))
		{
			return -(2*q);
		}
		else
		{
			if ((neg1 & ~neg2) | (~neg1 & neg2))
			{
				return -(2*q);
			}
			else
			{
				return 2*q;
			}
		}
	}
	else
	{
		return 2*q + 1;
	}	
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
	var int y, j, temp;
	let y = 0;
	let j = 7;
	while(j > -1)
	{
		let temp = Math.multiply((y + twoToThe[j]),(y + twoToThe[j]));
		if(temp < 0){
		}
		else{
		if((temp < x)|(temp = x))
			{
			let y = y + twoToThe[j];
			}
		}
	let j = j-1;
	}
	return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if(a > b)
		{
			return a;
		}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if(a < b)
		{
			return a;
		}
		return b;
    }
}
