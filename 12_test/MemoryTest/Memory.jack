// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array freeList;

    /** Initializes the class. */
    function void init() {
	let freeList = 0;
	let freeList[2048] = 14334;
	let freeList[2049] = 2050;
	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
	return freeList[address];	
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
	let freeList[address] = value;
	return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
	var Array segment, block;
	var int pointer, temp0, temp1;
	var boolean segmentFound;
	let segmentFound = false;
	let segment = 2048;
	while(~segmentFound)
	{
		if( size + 2 < segment[0] )
		{
			let block = segment + 2; // Allocated block starts at segment index + 2
			let block[0] = size + 1; // block[0] = length of the block
			let temp1 = segment[1];	 
			let temp0 = segment[0];
			let segment[0] = 2 ; //  Set old segment[0] to 2 to indicate it has been allocated
			let segment[1] = segment + size + 3; // Adjust the forward looking link
			let segment[size + 3] = temp0 - (size + 1) - 4;
			if( temp1 = 0)
			{	
				let segment[size + 4] = segment + size + 5;
			}
			else
			{	
				let segment[size + 4] = temp1;
			}

			let segmentFound = true;
		}
		else 
		{
			let segment = segment[1];
			//let segment[1] = segment + 2;
			if (segment[1] > 14334 )
			{
			// Heap overflow
			}
		}
	}
	let pointer = block+1;
	return pointer;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
	var Array segment;
	var int priorSegment, count;
	var boolean segmentFound;
	let count = 2;
	let segmentFound = false;
	let segment = 2048;
	while(~segmentFound)
	{
		if( (o > segment) & (o < segment[1])) // means we have found the location of the block
		{
			let priorSegment[0] = priorSegment[0] + priorSegment[2] + o[-1] + o[-3]; // Resets the preceding memory link
			let priorSegment[1] = o[-2]; // Relay the forward facing link
			while (count < priorSegment[0])
			{
				let priorSegment[count] = 0; // Set memory back to zero, just for clarity
				let count = count + 1;
			}
			let segmentFound = true;	// Indicate we have returned the block, exit loop
		}
		else 
		{
			let priorSegment = segment;
			let segment = segment[1]; // Continue searching for the location of the block
		}
	}
	return;
    }    
}
