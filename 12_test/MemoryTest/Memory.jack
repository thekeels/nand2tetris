// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array freeList;

    /** Initializes the class. */
    function void init() {
	let freeList = 0;
	let freeList[2048] = 14334;
	let freeList[2049] = 2050;
	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
	return freeList[address];	
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
	let freeList[address] = value;
	return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
	var Array segment, block;
	var int pointer;
	let segment = freeList[2048];
	if( size + 1 < segment[0] )
	{
		let block = segment[0] - (size + 1);
		let block[0] = segment[1] + 1;
		let block[1] = size + 1;
		let freeList[segment[1] + size] = segment[0] - (size + 1);
		let segment[0] = freeList[segment[1] + size] - segment[0];
		let segment[1] = segment[1] + (size + 1);
	}
	else 
	{
		
	}
	let pointer = freeList[block[0]];
	return pointer;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
	return;
    }    
}
