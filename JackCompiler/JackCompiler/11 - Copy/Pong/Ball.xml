<class>
<keyword> class </keyword>
<identifier> Ball </identifier>
(Ball , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> { </symbol>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
(x , FIELD , 0 , beingDefined)
<symbol> , </symbol>
<identifier> y </identifier>
(y , FIELD , 1 , beingDefined)
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> lengthx </identifier>
(lengthx , FIELD , 2 , beingDefined)
<symbol> , </symbol>
<identifier> lengthy </identifier>
(lengthy , FIELD , 3 , beingDefined)
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> d </identifier>
(d , FIELD , 4 , beingDefined)
<symbol> , </symbol>
<identifier> straightD </identifier>
(straightD , FIELD , 5 , beingDefined)
<symbol> , </symbol>
<identifier> diagonalD </identifier>
(diagonalD , FIELD , 6 , beingDefined)
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier> invert </identifier>
(invert , FIELD , 7 , beingDefined)
<symbol> , </symbol>
<identifier> positivex </identifier>
(positivex , FIELD , 8 , beingDefined)
<symbol> , </symbol>
<identifier> positivey </identifier>
(positivey , FIELD , 9 , beingDefined)
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> leftWall </identifier>
(leftWall , FIELD , 10 , beingDefined)
<symbol> , </symbol>
<identifier> rightWall </identifier>
(rightWall , FIELD , 11 , beingDefined)
<symbol> , </symbol>
<identifier> topWall </identifier>
(topWall , FIELD , 12 , beingDefined)
<symbol> , </symbol>
<identifier> bottomWall </identifier>
(bottomWall , FIELD , 13 , beingDefined)
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> wall </identifier>
(wall , FIELD , 14 , beingDefined)
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier> Ball </identifier>
(Ball , CLASS , No Index , CLASS/SUB-notdefined)
<identifier> new </identifier>
(new , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> Ax </identifier>
(Ax , ARG , 0 , beingDefined)
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> Ay </identifier>
(Ay , ARG , 1 , beingDefined)
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> AleftWall </identifier>
(AleftWall , ARG , 2 , beingDefined)
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> ArightWall </identifier>
(ArightWall , ARG , 3 , beingDefined)
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> AtopWall </identifier>
(AtopWall , ARG , 4 , beingDefined)
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> AbottomWall </identifier>
(AbottomWall , ARG , 5 , beingDefined)
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> Ax </identifier>
(Ax , ARG , 0 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> Ay </identifier>
(Ay , ARG , 1 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> leftWall </identifier>
(leftWall , FIELD , 10 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> AleftWall </identifier>
(AleftWall , ARG , 2 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> rightWall </identifier>
(rightWall , FIELD , 11 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> ArightWall </identifier>
(ArightWall , ARG , 3 , beingUsed)
</term>
<symbol> - </symbol>
<term>
<integerConstant> 6 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> topWall </identifier>
(topWall , FIELD , 12 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> AtopWall </identifier>
(AtopWall , ARG , 4 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> bottomWall </identifier>
(bottomWall , FIELD , 13 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> AbottomWall </identifier>
(AbottomWall , ARG , 5 , beingUsed)
</term>
<symbol> - </symbol>
<term>
<integerConstant> 6 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> wall </identifier>
(wall , FIELD , 14 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> show </identifier>
(show , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
(dispose , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Memory </identifier>
(Memory , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> deAlloc </identifier>
(deAlloc , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> show </identifier>
(show , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
(Screen , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> setColor </identifier>
(setColor , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> draw </identifier>
(draw , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> hide </identifier>
(hide , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
(Screen , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> setColor </identifier>
(setColor , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> draw </identifier>
(draw , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> draw </identifier>
(draw , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
(Screen , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
(drawRectangle , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getLeft </identifier>
(getLeft , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getRight </identifier>
(getRight , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> setDestination </identifier>
(setDestination , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> destx </identifier>
(destx , ARG , 1 , beingDefined)
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> desty </identifier>
(desty , ARG , 2 , beingDefined)
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> dx </identifier>
(dx , VAR , 0 , beingDefined)
<symbol> , </symbol>
<identifier> dy </identifier>
(dy , VAR , 1 , beingDefined)
<symbol> , </symbol>
<identifier> temp </identifier>
(temp , VAR , 2 , beingDefined)
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> lengthx </identifier>
(lengthx , FIELD , 2 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> destx </identifier>
(destx , ARG , 1 , beingUsed)
</term>
<symbol> - </symbol>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> lengthy </identifier>
(lengthy , FIELD , 3 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> desty </identifier>
(desty , ARG , 2 , beingUsed)
</term>
<symbol> - </symbol>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dx </identifier>
(dx , VAR , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> Math </identifier>
(Math , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> abs </identifier>
(abs , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> lengthx </identifier>
(lengthx , FIELD , 2 , beingUsed)
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dy </identifier>
(dy , VAR , 1 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> Math </identifier>
(Math , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> abs </identifier>
(abs , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> lengthy </identifier>
(lengthy , FIELD , 3 , beingUsed)
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> invert </identifier>
(invert , FIELD , 7 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dx </identifier>
(dx , VAR , 0 , beingUsed)
</term>
<symbol> &lt; </symbol>
<term>
<identifier> dy </identifier>
(dy , VAR , 1 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> invert </identifier>
(invert , FIELD , 7 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> temp </identifier>
(temp , VAR , 2 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> dx </identifier>
(dx , VAR , 0 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dx </identifier>
(dx , VAR , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> dy </identifier>
(dy , VAR , 1 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dy </identifier>
(dy , VAR , 1 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> temp </identifier>
(temp , VAR , 2 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> positivex </identifier>
(positivex , FIELD , 8 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
<symbol> &lt; </symbol>
<term>
<identifier> desty </identifier>
(desty , ARG , 2 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> positivey </identifier>
(positivey , FIELD , 9 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> &lt; </symbol>
<term>
<identifier> destx </identifier>
(destx , ARG , 1 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> positivex </identifier>
(positivex , FIELD , 8 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> &lt; </symbol>
<term>
<identifier> destx </identifier>
(destx , ARG , 1 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> positivey </identifier>
(positivey , FIELD , 9 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
<symbol> &lt; </symbol>
<term>
<identifier> desty </identifier>
(desty , ARG , 2 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier> d </identifier>
(d , FIELD , 4 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<identifier> dy </identifier>
(dy , VAR , 1 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<identifier> dx </identifier>
(dx , VAR , 0 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> straightD </identifier>
(straightD , FIELD , 5 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<identifier> dy </identifier>
(dy , VAR , 1 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> diagonalD </identifier>
(diagonalD , FIELD , 6 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dy </identifier>
(dy , VAR , 1 , beingUsed)
</term>
<symbol> - </symbol>
<term>
<identifier> dx </identifier>
(dx , VAR , 0 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> move </identifier>
(move , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> hide </identifier>
(hide , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> d </identifier>
(d , FIELD , 4 , beingUsed)
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> d </identifier>
(d , FIELD , 4 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> d </identifier>
(d , FIELD , 4 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<identifier> straightD </identifier>
(straightD , FIELD , 5 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> d </identifier>
(d , FIELD , 4 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> d </identifier>
(d , FIELD , 4 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<identifier> diagonalD </identifier>
(diagonalD , FIELD , 6 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> positivey </identifier>
(positivey , FIELD , 9 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> invert </identifier>
(invert , FIELD , 7 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> invert </identifier>
(invert , FIELD , 7 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> positivex </identifier>
(positivex , FIELD , 8 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> invert </identifier>
(invert , FIELD , 7 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> invert </identifier>
(invert , FIELD , 7 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> &gt; </symbol>
<term>
<identifier> leftWall </identifier>
(leftWall , FIELD , 10 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> wall </identifier>
(wall , FIELD , 14 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> leftWall </identifier>
(leftWall , FIELD , 10 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> &lt; </symbol>
<term>
<identifier> rightWall </identifier>
(rightWall , FIELD , 11 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> wall </identifier>
(wall , FIELD , 14 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> rightWall </identifier>
(rightWall , FIELD , 11 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
<symbol> &gt; </symbol>
<term>
<identifier> topWall </identifier>
(topWall , FIELD , 12 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> wall </identifier>
(wall , FIELD , 14 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> topWall </identifier>
(topWall , FIELD , 12 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
<symbol> &lt; </symbol>
<term>
<identifier> bottomWall </identifier>
(bottomWall , FIELD , 13 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> wall </identifier>
(wall , FIELD , 14 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> bottomWall </identifier>
(bottomWall , FIELD , 13 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> show </identifier>
(show , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> wall </identifier>
(wall , FIELD , 14 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> bounce </identifier>
(bounce , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> bouncingDirection </identifier>
(bouncingDirection , ARG , 1 , beingDefined)
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> newx </identifier>
(newx , VAR , 0 , beingDefined)
<symbol> , </symbol>
<identifier> newy </identifier>
(newy , VAR , 1 , beingDefined)
<symbol> , </symbol>
<identifier> divLengthx </identifier>
(divLengthx , VAR , 2 , beingDefined)
<symbol> , </symbol>
<identifier> divLengthy </identifier>
(divLengthy , VAR , 3 , beingDefined)
<symbol> , </symbol>
<identifier> factor </identifier>
(factor , VAR , 4 , beingDefined)
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> divLengthx </identifier>
(divLengthx , VAR , 2 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> lengthx </identifier>
(lengthx , FIELD , 2 , beingUsed)
</term>
<symbol> / </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> divLengthy </identifier>
(divLengthy , VAR , 3 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> lengthy </identifier>
(lengthy , FIELD , 3 , beingUsed)
</term>
<symbol> / </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> bouncingDirection </identifier>
(bouncingDirection , ARG , 1 , beingUsed)
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> factor </identifier>
(factor , VAR , 4 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> lengthx </identifier>
(lengthx , FIELD , 2 , beingUsed)
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> bouncingDirection </identifier>
(bouncingDirection , ARG , 1 , beingUsed)
</term>
<symbol> = </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> | </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> lengthx </identifier>
(lengthx , FIELD , 2 , beingUsed)
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> bouncingDirection </identifier>
(bouncingDirection , ARG , 1 , beingUsed)
</term>
<symbol> = </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> factor </identifier>
(factor , VAR , 4 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 20 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> factor </identifier>
(factor , VAR , 4 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall </identifier>
(wall , FIELD , 14 , beingUsed)
</term>
<symbol> = </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> newx </identifier>
(newx , VAR , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 506 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newy </identifier>
(newy , VAR , 1 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> divLengthy </identifier>
(divLengthy , VAR , 3 , beingUsed)
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 50 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier> divLengthx </identifier>
(divLengthx , VAR , 2 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newy </identifier>
(newy , VAR , 1 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> newy </identifier>
(newy , VAR , 1 , beingUsed)
</term>
<symbol> * </symbol>
<term>
<identifier> factor </identifier>
(factor , VAR , 4 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall </identifier>
(wall , FIELD , 14 , beingUsed)
</term>
<symbol> = </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> newx </identifier>
(newx , VAR , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newy </identifier>
(newy , VAR , 1 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> divLengthy </identifier>
(divLengthy , VAR , 3 , beingUsed)
</term>
<symbol> * </symbol>
<term>
<integerConstant> 50 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier> divLengthx </identifier>
(divLengthx , VAR , 2 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newy </identifier>
(newy , VAR , 1 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> newy </identifier>
(newy , VAR , 1 , beingUsed)
</term>
<symbol> * </symbol>
<term>
<identifier> factor </identifier>
(factor , VAR , 4 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall </identifier>
(wall , FIELD , 14 , beingUsed)
</term>
<symbol> = </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> newy </identifier>
(newy , VAR , 1 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 250 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newx </identifier>
(newx , VAR , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> divLengthx </identifier>
(divLengthx , VAR , 2 , beingUsed)
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 25 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier> divLengthy </identifier>
(divLengthy , VAR , 3 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newx </identifier>
(newx , VAR , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> newx </identifier>
(newx , VAR , 0 , beingUsed)
</term>
<symbol> * </symbol>
<term>
<identifier> factor </identifier>
(factor , VAR , 4 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> newy </identifier>
(newy , VAR , 1 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newx </identifier>
(newx , VAR , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> divLengthx </identifier>
(divLengthx , VAR , 2 , beingUsed)
</term>
<symbol> * </symbol>
<term>
<integerConstant> 25 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier> divLengthy </identifier>
(divLengthy , VAR , 3 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> newx </identifier>
(newx , VAR , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> newx </identifier>
(newx , VAR , 0 , beingUsed)
</term>
<symbol> * </symbol>
<term>
<identifier> factor </identifier>
(factor , VAR , 4 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> setDestination </identifier>
(setDestination , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> newx </identifier>
(newx , VAR , 0 , beingUsed)
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> newy </identifier>
(newy , VAR , 1 , beingUsed)
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
