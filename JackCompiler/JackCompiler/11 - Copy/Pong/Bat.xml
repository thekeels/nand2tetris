<class>
<keyword> class </keyword>
<identifier> Bat </identifier>
(Bat , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> { </symbol>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
(x , FIELD , 0 , beingDefined)
<symbol> , </symbol>
<identifier> y </identifier>
(y , FIELD , 1 , beingDefined)
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> width </identifier>
(width , FIELD , 2 , beingDefined)
<symbol> , </symbol>
<identifier> height </identifier>
(height , FIELD , 3 , beingDefined)
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> direction </identifier>
(direction , FIELD , 4 , beingDefined)
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier> Bat </identifier>
(Bat , CLASS , No Index , CLASS/SUB-notdefined)
<identifier> new </identifier>
(new , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> Ax </identifier>
(Ax , ARG , 0 , beingDefined)
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> Ay </identifier>
(Ay , ARG , 1 , beingDefined)
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> Awidth </identifier>
(Awidth , ARG , 2 , beingDefined)
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> Aheight </identifier>
(Aheight , ARG , 3 , beingDefined)
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> Ax </identifier>
(Ax , ARG , 0 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> Ay </identifier>
(Ay , ARG , 1 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> width </identifier>
(width , FIELD , 2 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> Awidth </identifier>
(Awidth , ARG , 2 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> height </identifier>
(height , FIELD , 3 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> Aheight </identifier>
(Aheight , ARG , 3 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> direction </identifier>
(direction , FIELD , 4 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> show </identifier>
(show , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
(dispose , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Memory </identifier>
(Memory , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> deAlloc </identifier>
(deAlloc , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> show </identifier>
(show , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
(Screen , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> setColor </identifier>
(setColor , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> draw </identifier>
(draw , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> hide </identifier>
(hide , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
(Screen , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> setColor </identifier>
(setColor , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> draw </identifier>
(draw , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> draw </identifier>
(draw , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
(Screen , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
(drawRectangle , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<identifier> width </identifier>
(width , FIELD , 2 , beingUsed)
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<identifier> height </identifier>
(height , FIELD , 3 , beingUsed)
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> setDirection </identifier>
(setDirection , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> Adirection </identifier>
(Adirection , ARG , 1 , beingDefined)
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> direction </identifier>
(direction , FIELD , 4 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> Adirection </identifier>
(Adirection , ARG , 1 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getLeft </identifier>
(getLeft , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getRight </identifier>
(getRight , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<identifier> width </identifier>
(width , FIELD , 2 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> setWidth </identifier>
(setWidth , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier> Awidth </identifier>
(Awidth , ARG , 1 , beingDefined)
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> hide </identifier>
(hide , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> width </identifier>
(width , FIELD , 2 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> Awidth </identifier>
(Awidth , ARG , 1 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> show </identifier>
(show , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> move </identifier>
(move , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> direction </identifier>
(direction , FIELD , 4 , beingUsed)
</term>
<symbol> = </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
(Screen , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> setColor </identifier>
(setColor , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
(Screen , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
(drawRectangle , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<identifier> width </identifier>
(width , FIELD , 2 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<identifier> width </identifier>
(width , FIELD , 2 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<identifier> height </identifier>
(height , FIELD , 3 , beingUsed)
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
(Screen , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> setColor </identifier>
(setColor , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
(Screen , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
(drawRectangle , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<identifier> height </identifier>
(height , FIELD , 3 , beingUsed)
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<identifier> width </identifier>
(width , FIELD , 2 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 511 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 511 </integerConstant>
</term>
<symbol> - </symbol>
<term>
<identifier> width </identifier>
(width , FIELD , 2 , beingUsed)
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
(Screen , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> setColor </identifier>
(setColor , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
(Screen , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
(drawRectangle , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<identifier> height </identifier>
(height , FIELD , 3 , beingUsed)
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
(Screen , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> setColor </identifier>
(setColor , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
(Screen , CLASS , No Index , CLASS/SUB-notdefined)
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
(drawRectangle , SUBROUTINE , No Index , CLASS/SUB-notdefined)
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<identifier> width </identifier>
(width , FIELD , 2 , beingUsed)
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> x </identifier>
(x , FIELD , 0 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<identifier> width </identifier>
(width , FIELD , 2 , beingUsed)
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> y </identifier>
(y , FIELD , 1 , beingUsed)
</term>
<symbol> + </symbol>
<term>
<identifier> height </identifier>
(height , FIELD , 3 , beingUsed)
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
